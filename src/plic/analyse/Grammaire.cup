package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.arbre.instruction.*;
import plic.arbre.classe.*;
import plic.tds.*;
import plic.exceptions.*;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminﾃｩe") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON ;
terminal Symbol    fin, pointvirgule, publique, privee, classe, egal, virgule, ecrire;
terminal String    CONSTANTEINT, CONSTANTEBOOL, idf, entier, chaine, debut, fin, OPEROPER;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait SYSTEME ;
non terminal Classe CLASSE;
non terminal Expression EXPR, CSTE;
non terminal Integer STATUT;
non terminal Type TYPE;
non terminal List<Instruction> LISTE_DECL, DECL_CHAMP, DECL_CONST, DECLARATION;
non terminal Instruction INSTRUCTION, AFFECT, ECRIRE;
non terminal Entree ACCES;
non terminal List<String> LISTE_IDF;

non terminal BlocDInstructions BLOCDINSTRUCTIONS, LIST_INST;

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* WARNING : ne fait que supprimer les erreurs de shift/reduce. pas forcément correct */
precedence left ecrire;
precedence left idf;


/* ----------------------------Grammar Section-------------------- */
 
start with SYSTEME ;

SYSTEME ::= 	CLASSE:c
                {:
                       RESULT = c;  
                :}
                ;

CLASSE 	::=	classe idf:i LISTE_DECL:l fin
                {: 
                        Classe c = new Classe(0);
                        c.ajouterTout(l);
                        RESULT = c;
                :}
                ;

LISTE_DECL ::= LISTE_DECL:li DECLARATION:d
                {:
                        if(d != null){
                                li.addAll(d);
                        }
                        RESULT = li;
                :}
                | DECLARATION:d
                {:
                        List<Instruction> li = new LinkedList<Instruction>();
                        if(d != null){
                                li.addAll(d);
                        }
                        RESULT = li;
                :}
                ;
				
DECLARATION ::= DECL_CHAMP
                {:
                        RESULT = null;
                :}
                | DECL_CONST:li
                {:
                        RESULT = li;
                :}
                ;

DECL_CHAMP ::= 	STATUT:s TYPE:t LISTE_IDF:lidf pointvirgule
                {:
                        Tds tds = Tds.getInstance();
                        for(String idf : lidf){
                                Entree e = new Entree(idf);
                                Symbole symb = new Symbole(s, new TypeEntier());
                                tds.ajouter(e, symb);
                                //System.out.println("ajout de variable : "+e.getNom());
                        }
                :}
                ;

LISTE_IDF 	::= LISTE_IDF:li virgule idf:i
                {:
                        li.add(i);
                        RESULT = li;
                :}
                | idf:i
                {:
                        List<String> li = new LinkedList<String>();
                        li.add(i);
                        RESULT = li;
                :}
                ; 



STATUT	::=	publique
		{: RESULT = Symbole.PUBLIQUE; :}
		| privee
		{: RESULT = Symbole.PRIVEE; :}
        ;

TYPE	::=	entier
		{: RESULT = new TypeEntier(); :}
        ;

DECL_CONST ::= 	DECL_CONST:li INSTRUCTION:i
                {:
                        li.add(i);
                        RESULT = li;
                :}
                | INSTRUCTION:i
                {:
                        List<Instruction> li = new LinkedList<Instruction>();
                        li.add(i);
                        RESULT = li;
                :}
                ;

INSTRUCTION ::= AFFECT:a pointvirgule
                {:
                        RESULT = a;
                :}
                | ECRIRE:e pointvirgule
                {:
                        RESULT = e;
                :}
                ;
                
BLOCDINSTRUCTIONS ::=	LIST_INST
					;

LIST_INST ::=	LIST_INST INSTRUCTION
			|	INSTRUCTION
			;

AFFECT 	::= 	ACCES:var egal EXPR:e
                {:
                        RESULT = new AffectationEntier(var, e);
                :}
                ;

ACCES	::= 	idf:i
                {: 
                        Entree e = new Entree(i);
                        RESULT = e;
                :}
                ;
				
ECRIRE	::= 	ecrire chaine:cst
                {:
                        RESULT = new Ecrire(0, cst);
                :}
                |ecrire EXPR:e
                {:
                		RESULT = new EcrireExpression(0, e);
                :}
                ;

BOUCLE  ::= 	pour (idf=EXP ; EXP; idf OPEROPER) debut 
				{INSTRUCTION} fin
				
EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
        |		
        		ACCES:e
        		{: RESULT = new VariableEntiere(0, e) ; :}
                ;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e, eleft+1) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e, eleft+1) ; :}
                ;